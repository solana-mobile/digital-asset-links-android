/*
 * Copyright (c) 2022 Solana Mobile Inc.
 */

plugins {
    id 'com.android.library'
    id 'com.google.protobuf' version '0.9.4'
    id 'maven-publish'
    id 'signing'
}

android {
    namespace = 'com.solana.digitalassetlinks'
    compileSdk 34

    defaultConfig {
        minSdk 23
        targetSdk 34

        consumerProguardFiles "consumer-rules.pro"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    sourceSets {
        test {
            proto {
                srcDir 'external/digitalassetlinks/compatibility-tests/v1'
            }
        }
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
            withJavadocJar()
        }
    }
}

publishing {
    publications {
        release(MavenPublication) {
            groupId = group
            artifactId = 'digital-asset-links-android'
            pom {
                name = 'Digital Asset Links for Android'
                description = 'An implementation of Digital Asset Links for verifying Android packages against a domain hosting asset links'
                url = 'https://github.com/solana-mobile/digital-asset-links-android'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Solana Mobile Engineering'
                        email = 'eng@solanamobile.com'
                        organization = 'Solana Mobile Inc.'
                        organizationUrl = 'https://solanamobile.com'
                    }
                }
                organization {
                    name = 'Solana Mobile Inc.'
                    url = 'https://solanamobile.com'
                }
                scm {
                    connection = 'scm:git:git://github.com/solana-mobile/digital-asset-links-android.git'
                    developerConnection = 'scm:git:ssh://github.com/solana-mobile/digital-asset-links-android.git'
                    url = 'https://github.com/solana-mobile/digital-asset-links-android/tree/main'
                }
            }

            afterEvaluate {
                from components.release
            }
        }
    }
}

signing {
    // Signing private key and password provided by ORG_GRADLE_PROJECT_signingKey and
    // ORG_GRADLE_PROJECT_signingPassword, respectively
    def signingKey = findProperty('signingKey')
    def signingPassword = findProperty('signingPassword')
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.release
}

protobuf {
    protoc {
        def protoc_ver = '4.28.2'
        artifact = "com.google.protobuf:protoc:$protoc_ver"   // Download from repositories
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java { }
            }
        }
    }
}

// Define JavaDoc build task for all variants
android.libraryVariants.all { variant ->
    task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
        description "Generates Javadoc for $variant.name."
        source = variant.javaCompileProvider.get().source
        classpath = project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += files(variant.javaCompileProvider.get().classpath)
        options.links("https://docs.oracle.com/javase/8/docs/api/");
        options.links("https://d.android.com/reference/");
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}

// Build JavaDoc when making a release build
tasks.whenTaskAdded { task ->
    if (task.name == 'assembleRelease') {
        task.dependsOn("generateReleaseJavadoc")
    }
}

dependencies {
    compileOnly 'androidx.annotation:annotation:1.9.0'
    testImplementation 'androidx.annotation:annotation:1.9.0'
    testImplementation 'com.google.protobuf:protobuf-java:4.28.3'
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.robolectric:robolectric:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.2.1'
    androidTestImplementation 'androidx.test:rules:1.6.1'
    androidTestImplementation 'androidx.test:runner:1.6.2'
    androidTestImplementation 'junit:junit:4.13.2'
}